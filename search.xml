<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GNN概述</title>
    <url>/posts/40187/</url>
    <content><![CDATA[<h3 id="图的概念"><a href="#图的概念" class="headerlink" title="图的概念"></a>图的概念</h3><h4 id="如何将数据表示成图呢？"><a href="#如何将数据表示成图呢？" class="headerlink" title="如何将数据表示成图呢？"></a>如何将数据表示成图呢？</h4><ol>
<li>图片数据</li>
</ol>
<ol>
<li>文本数据</li>
</ol>
<ol>
<li>生活中例子</li>
</ol>
<ul>
<li>分子图</li>
</ul>
<ul>
<li>社交网络</li>
</ul>
<ul>
<li>引用图</li>
</ul>
<h4 id="图在研究什么问题？"><a href="#图在研究什么问题？" class="headerlink" title="图在研究什么问题？"></a>图在研究什么问题？</h4><ol>
<li>图结构层面的</li>
</ol>
<ol>
<li>顶点层面的</li>
</ol>
<ol>
<li>边层面的</li>
</ol>
<p>预测边的属性</p>
<h4 id="图需要解决问题会碰到的挑战"><a href="#图需要解决问题会碰到的挑战" class="headerlink" title="图需要解决问题会碰到的挑战"></a>图需要解决问题会碰到的挑战</h4><p>如何来表示我的图？从而使得我的图是可以和神经网络兼容的</p>
<p>边、顶点、全局信息、连接性 connectivity</p>
<p>要处理边，节点，全局信息的方法很简单，可以使用向量来表示即可，但是对于连接性来说，什么是连接性呢？就是说每条边到底连接的是哪两个点，可以很容易想到使用邻接矩阵来表示。想想可能出现的问题？</p>
<p>当矩阵特别大的话，那该如何来处理呢，稀疏矩阵。</p>
<p>当邻接矩阵四个顶点各种排序的话，那么就会依据排序会改变我的邻接矩阵，也就是会受到我的顺序的影响</p>
<p>解决办法：邻接列表的方式来处理</p>
<h3 id="图神经网络-GNN"><a href="#图神经网络-GNN" class="headerlink" title="图神经网络 GNN"></a>图神经网络 GNN</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>到底什么是图神经网络呢？我们是否可以用一句简单的话直白的表达它的核心思想呢？</p>
<p>答案是可以的，图神经网络是对图上的所有的属性进行一个可以优化的变换（这个变换是可以保存图的对称信息的）</p>
<p>输入：图 </p>
<p>输出：图</p>
]]></content>
      <categories>
        <category>研究生课程</category>
        <category>机器学习</category>
        <category>图神经网络GNN</category>
      </categories>
      <tags>
        <tag>GNN</tag>
      </tags>
  </entry>
  <entry>
    <title>bfs走迷宫问题</title>
    <url>/posts/25805/</url>
    <content><![CDATA[<h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>给定一个 n×m 的二维整数数组，用来表示一个迷宫，数组中只包含 0 或 1，其中 0 表示可以走的路，1 表示不可通过的墙壁。</p>
<p>最初，有一个人位于左上角 (1,1) 处，已知该人每次可以向上、下、左、右任意一个方向移动一个位置。</p>
<p>请问，该人从左上角移动至右下角 (n,m) 处，至少需要移动多少次。</p>
<p>数据保证 (1,1) 处和 (n,m) 处的数字为 0，且一定至少存在一条通路。</p>
<span id="more"></span>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数 n 和 m。</p>
<p>接下来 n 行，每行包含 m 个整数（0 或 1），表示完整的二维数组迷宫。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示从左上角移动至右下角的最少移动次数。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n,m≤100</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 5</span><br><span class="line">0 1 0 0 0</span><br><span class="line">0 1 0 1 0</span><br><span class="line">0 0 0 0 0</span><br><span class="line">0 1 1 1 0</span><br><span class="line">0 0 0 1 0</span><br></pre></td></tr></table></figure>
<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">8</span><br></pre></td></tr></table></figure>
<h4 id="算法思路："><a href="#算法思路：" class="headerlink" title="算法思路："></a>算法思路：</h4><p>由于是需要求出最短路径，可以很容易地发现每条边的权值为1，可以很快地想到使用bfs，考虑这里是一个二维数组，在数据的存储上可能会有点差错，在这里为了熟悉模拟队列的操作，选择使用数组来模拟队列，只需要一个数组，一个队首指针hh和一个队尾tt即可，</p>
<p>bfs是具有模板的(概括一下)如下所示:</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//初始化状态，刚开始队列为空，先将第一个元素放进队列中去,并让指针指向队列的下一个元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt) <span class="comment">//当队列不为空时</span></span><br><span class="line">    {</span><br><span class="line">     	<span class="comment">//取出队首元素</span></span><br><span class="line">        <span class="comment">//判断对应的条件</span></span><br><span class="line">        <span class="comment">//如果为true，那么将该元素置入队尾，并且将队尾指针往后移</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>具体代码实现如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span> <span class="comment">//pair</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span> <span class="comment">//memset </span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个队列</span></span><br><span class="line">PII q[N * N];</span><br><span class="line"><span class="comment">// 队首和队尾</span></span><br><span class="line"><span class="keyword">int</span> hh,tt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> g[N][N];</span><br><span class="line"><span class="comment">//存储每个点到（0,0）的距离distance</span></span><br><span class="line"><span class="keyword">int</span> d[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="comment">//初始化条件</span></span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="comment">// 将原点放入到队首</span></span><br><span class="line">    q[<span class="number">0</span>] = {<span class="number">0</span>,<span class="number">0</span>};</span><br><span class="line">    d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储上下左右四个方向</span></span><br><span class="line">    <span class="keyword">int</span> dx[<span class="number">4</span>] = {<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>};</span><br><span class="line">    <span class="keyword">int</span> dy[<span class="number">4</span>] = {<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>};</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(hh &lt;= tt)   <span class="comment">//当队列不为空时</span></span><br><span class="line">    {</span><br><span class="line">        PII t = q[hh ++];  <span class="comment">//取出队首元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">int</span> x = t.first + dx[i];</span><br><span class="line">            <span class="keyword">int</span> y = t.second + dy[i];</span><br><span class="line">            <span class="comment">//如果该处没有使用过 并且走的通的话</span></span><br><span class="line">            <span class="keyword">if</span>(x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m &amp;&amp; d[x][y] == <span class="number">-1</span> &amp;&amp; g[x][y] == <span class="number">0</span>)</span><br><span class="line">            {</span><br><span class="line">                d[x][y] = d[t.first][t.second] + <span class="number">1</span>;</span><br><span class="line">                q[++ tt] = {x, y}; <span class="comment">//将对应元素加入队列</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> d[n<span class="number">-1</span>][m<span class="number">-1</span>];</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;g[i][j]);</span><br><span class="line">            </span><br><span class="line">    cout &lt;&lt; <span class="built_in">bfs</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure>
<p>ps：（也可以使用stl的queue来实现，会比数组模拟会好理解的多，明天再补，不能熬夜~，就酱紫）</p>
]]></content>
      <categories>
        <category>Acwing</category>
        <category>BFS</category>
      </categories>
      <tags>
        <tag>Acwing</tag>
      </tags>
  </entry>
  <entry>
    <title>data mining 关联规则</title>
    <url>/posts/52112/</url>
    <content><![CDATA[<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="frequent-Item-频繁项集"><a href="#frequent-Item-频繁项集" class="headerlink" title="frequent Item - 频繁项集"></a>frequent Item - 频繁项集</h3><p>项与项集： 设Itemset = {item_1，item_2，…item_n}是所有项的结集合</p>
<p>其中item_k(k=1,2,3,…n)被称为项，项的集合被称之为itemset</p>
<p>频繁项集：如果项集I的相对支持度满足实现定义好的最小支持度阈值，则I是频繁项集。</p>
<p>这个最小支持度阈值是自己给定的</p>
<h3 id="Support-支持度"><a href="#Support-支持度" class="headerlink" title="Support - 支持度"></a>Support - 支持度</h3><p>support of an association rule(关联规则的可信度)—-本质上来讲就是频率：</p>
<span id="more"></span>
<p>其中表示包含X和Y的并集的概率</p>
<script type="math/tex; mode=display">
Support(X \to Y) = \frac{(X \cup Y) }{n}</script><h3 id="Confidence-置信度"><a href="#Confidence-置信度" class="headerlink" title="Confidence  - 置信度"></a>Confidence  - 置信度</h3><script type="math/tex; mode=display">
Confidence(X \to Y) = \frac{ (X \cup Y)}{X}</script><p>从本质上来看，这个表达式与条件概率没有区别，就是计算一个先验概率</p>
<script type="math/tex; mode=display">
Confidence(X \to Y) = \frac{Support(X \cup Y)}{Support(X)}</script><p>条件概率公式：<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex" xmlns="http://www.w3.org/2000/svg" width="7.742ex" height="2.262ex" role="img" focusable="false" viewbox="0 -750 3422 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D443" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"/></g><g data-mml-node="mo" transform="translate(751,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"/></g><g data-mml-node="mi" transform="translate(1140,0)"><path data-c="1D44C" d="M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z"/></g><g data-mml-node="mo" transform="translate(1903,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(2181,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="mo" transform="translate(3033,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"/></g></g></g></svg></mjx-container></p>
<p>强关联规则：满足最小支持度和最小置信度的关联规则</p>
<h2 id="Aprior算法"><a href="#Aprior算法" class="headerlink" title="Aprior算法"></a>Aprior算法</h2><p>算法核心思路：</p>
<ul>
<li>一个频繁集中的所有想都必须是频繁项</li>
<li>一个不频繁项的超集都是不频繁的</li>
</ul>
<p>算法流程：</p>
<ul>
<li>找出所有的频繁项集</li>
<li>由频繁集产生强关联规则</li>
</ul>
<p>伪代码描述过程：</p>
<p><img src="/.io//1.jpg" alt="伪代码描述"></p>
<p>其中：Candidate为候选集，需要之前的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex" xmlns="http://www.w3.org/2000/svg" width="2.562ex" height="1.902ex" role="img" focusable="false" viewbox="0 -683 1132.4 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D43F" d="M228 637Q194 637 192 641Q191 643 191 649Q191 673 202 682Q204 683 217 683Q271 680 344 680Q485 680 506 683H518Q524 677 524 674T522 656Q517 641 513 637H475Q406 636 394 628Q387 624 380 600T313 336Q297 271 279 198T252 88L243 52Q243 48 252 48T311 46H328Q360 46 379 47T428 54T478 72T522 106T564 161Q580 191 594 228T611 270Q616 273 628 273H641Q647 264 647 262T627 203T583 83T557 9Q555 4 553 3T537 0T494 -1Q483 -1 418 -1T294 0H116Q32 0 32 10Q32 17 34 24Q39 43 44 45Q48 46 59 46H65Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Q285 635 228 637Z"/></g><g data-mml-node="mi" transform="translate(714,-150) scale(0.707)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"/></g></g></g></g></svg></mjx-container>中挑出可靠的频繁集</p>
<p>python代码实现：</p>
<p>ps：在学习他人的代码的同时，也需要学习对应的代码书写规范，注释等。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadDataSet</span>():</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    function: 构造原始数据</span></span><br><span class="line"><span class="string">    :return: 原始数据集合</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>[[<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>],</span><br><span class="line">           [<span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'E'</span>],</span><br><span class="line">           [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>],</span><br><span class="line">           [<span class="string">'B'</span>, <span class="string">'E'</span>]]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createC1</span>(<span class="params">dataSet</span>):</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    function: 将所有元素装换为frozenset型字典，并存放到列表中</span></span><br><span class="line"><span class="string">    :param dataSet:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    C1 = []</span><br><span class="line">    <span class="keyword">for</span> transaction <span class="keyword">in</span> dataSet:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> transaction:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> [item] <span class="keyword">in</span> C1:</span><br><span class="line">                C1.append([item])</span><br><span class="line">    C1.sort()</span><br><span class="line">    <span class="comment"># 此处使用frozenset是为了可以讲这些值作为字典的键</span></span><br><span class="line">    <span class="comment"># frozenset为不可变集合，set为可变集合</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">frozenset</span>, C1))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scanD</span>(<span class="params">D, Ck, minSupport</span>):</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    function：过滤掉不符合支持度的集合</span></span><br><span class="line"><span class="string">    实现：</span></span><br><span class="line"><span class="string">        遍历原始数据集合候选频繁项集，统计频繁项集汇中出现的次数</span></span><br><span class="line"><span class="string">        由此计算出支持度，再对比支持度是否满足要求</span></span><br><span class="line"><span class="string">        不满足的话则剔除，同时保留每个数据的支持度</span></span><br><span class="line"><span class="string">    :param D: 原始数据转换后的字典</span></span><br><span class="line"><span class="string">    :param Ck: 候选频繁项集</span></span><br><span class="line"><span class="string">    :param minSupport: 最小支持度</span></span><br><span class="line"><span class="string">    :return: 频繁项集列表retList 所有元素的支持度字典</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    ssCnt = {}</span><br><span class="line">    <span class="keyword">for</span> tid <span class="keyword">in</span> D:</span><br><span class="line">        <span class="keyword">for</span> can <span class="keyword">in</span> Ck:</span><br><span class="line">            <span class="keyword">if</span> can.issubset(tid):</span><br><span class="line">                <span class="keyword">if</span> can <span class="keyword">not</span> <span class="keyword">in</span> ssCnt:</span><br><span class="line">                    ssCnt[can] = <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    ssCnt[can] += <span class="number">1</span></span><br><span class="line">    numItems = <span class="built_in">float</span>(<span class="built_in">len</span>(D))</span><br><span class="line">    retList = []</span><br><span class="line">    supportData = {}</span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> ssCnt:</span><br><span class="line">        support = ssCnt[key] / numItems</span><br><span class="line">        <span class="keyword">if</span> support &gt;= minSupport:</span><br><span class="line">            retList.insert(<span class="number">0</span>, key)</span><br><span class="line">        supportData[key] = support</span><br><span class="line">    <span class="keyword">return</span> retList, supportData  <span class="comment"># 排除不符合支持度元素后的元素 每个元素支持度</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">aprioriGen</span>(<span class="params">Lk, k</span>) :</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    功能： 生成所有可以组合的集合</span></span><br><span class="line"><span class="string">    具体逻辑：通过每次比对频繁项集相邻的k-2个元素是否相等，如果相等就构造出一个新的集合</span></span><br><span class="line"><span class="string">    :param Lk: 频繁项集列表Lk</span></span><br><span class="line"><span class="string">    :param k: 项集元素个数k，当前组成项集的个数</span></span><br><span class="line"><span class="string">    :return: 频繁项集列表Ck</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    举例：[frozenset({2, 3}), frozenset({3, 5})] -&gt; [frozenset({2, 3, 5})]</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    retList = []</span><br><span class="line">    lenLk = <span class="built_in">len</span>(Lk)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(lenLk) :  <span class="comment"># 两层循环比较Lk中的每个元素与其它元素</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i + <span class="number">1</span>, lenLk) :</span><br><span class="line">            L1 = <span class="built_in">list</span>(Lk[i])[:k - <span class="number">2</span>]  <span class="comment"># 将集合转为list后取值</span></span><br><span class="line">            L2 = <span class="built_in">list</span>(Lk[j])[:k - <span class="number">2</span>]</span><br><span class="line">            L1.sort();</span><br><span class="line">            L2.sort()  <span class="comment"># 这里说明一下：该函数每次比较两个list的前k-2个元素，如果相同则求并集得到k个元素的集合</span></span><br><span class="line">            <span class="keyword">if</span> L1 == L2 :</span><br><span class="line">                retList.append(Lk[i] | Lk[j])  <span class="comment"># 求并集</span></span><br><span class="line">    <span class="keyword">return</span> retList  <span class="comment"># 返回频繁项集列表Ck</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apriori</span>(<span class="params">dataSet, minSupport=<span class="number">0.5</span></span>) :</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    function：apriori算法实现</span></span><br><span class="line"><span class="string">    :param dataSet: 原始数据集合</span></span><br><span class="line"><span class="string">    :param minSupport: 最小支持度</span></span><br><span class="line"><span class="string">    :return: 所有满足大于阈值的组合 集合支持度列表</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    D = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">set</span>, dataSet))  <span class="comment"># 转换列表记录为字典，为了方便统计数据项出现的次数</span></span><br><span class="line">    C1 = createC1(dataSet)  <span class="comment"># 将每个元素转会为frozenset字典    [frozenset({A}), frozenset({B}), frozenset({C}), frozenset({D}), frozenset({E})]</span></span><br><span class="line">    <span class="comment"># 初始候选频繁项集合</span></span><br><span class="line">    L1, supportData = scanD(D, C1, minSupport)  <span class="comment"># 过滤数据,去除不满足最小支持度的项</span></span><br><span class="line">    <span class="comment"># L1 频繁项集列表 supportData 每个项集对应的支持度</span></span><br><span class="line">    L = [L1]</span><br><span class="line">    k = <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">len</span>(L[k - <span class="number">2</span>]) &gt; <span class="number">0</span>) :  <span class="comment"># 若仍有满足支持度的集合则继续做关联分析</span></span><br><span class="line">        Ck = aprioriGen(L[k - <span class="number">2</span>], k)  <span class="comment"># Ck候选频繁项集</span></span><br><span class="line">        Lk, supK = scanD(D, Ck, minSupport)  <span class="comment"># Lk频繁项集</span></span><br><span class="line">        supportData.update(supK)  <span class="comment"># 更新字典（把新出现的集合:支持度加入到supportData中）</span></span><br><span class="line">        L.append(Lk)</span><br><span class="line">        k += <span class="number">1</span>  <span class="comment"># 每次新组合的元素都只增加了一个，所以k也+1（k表示元素个数）</span></span><br><span class="line">    <span class="keyword">return</span> L, supportData</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calcConf</span>(<span class="params">freqSet, H, supportData, brl, minConf=<span class="number">0.7</span></span>) :</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    对规则进行评估 获得满足最小可信度的关联规则</span></span><br><span class="line"><span class="string">    :param freqSet: 集合元素大于两个的频繁项集</span></span><br><span class="line"><span class="string">    :param H:频繁项单个元素的集合列表</span></span><br><span class="line"><span class="string">    :param supportData:频繁项对应的支持度</span></span><br><span class="line"><span class="string">    :param brl:关联规则</span></span><br><span class="line"><span class="string">    :param minConf:最小可信度</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    prunedH = []  <span class="comment"># 创建一个新的列表去返回</span></span><br><span class="line">    <span class="keyword">for</span> conseq <span class="keyword">in</span> H :</span><br><span class="line">        conf = supportData[freqSet] / supportData[freqSet - conseq]  <span class="comment"># 计算置信度</span></span><br><span class="line">        <span class="keyword">if</span> conf &gt;= minConf :</span><br><span class="line">            <span class="built_in">print</span>(freqSet - conseq,<span class="string">'--&gt;'</span>,conseq,<span class="string">'conf:'</span>,conf)</span><br><span class="line">            brl.append((freqSet - conseq, conseq, conf))</span><br><span class="line">            prunedH.append(conseq)</span><br><span class="line">    <span class="keyword">return</span> prunedH</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rulesFromConseq</span>(<span class="params">freqSet, H, supportData, brl, minConf=<span class="number">0.7</span></span>) :</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    功能：生成候选规则集合</span></span><br><span class="line"><span class="string">    :param freqSet: 集合元素大于两个的频繁项集</span></span><br><span class="line"><span class="string">    :param H:频繁项单个元素的集合列表</span></span><br><span class="line"><span class="string">    :param supportData:频繁项对应的支持度</span></span><br><span class="line"><span class="string">    :param brl:关联规则</span></span><br><span class="line"><span class="string">    :param minConf:最小可信度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    m = <span class="built_in">len</span>(H[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">len</span>(freqSet) &gt; (m + <span class="number">1</span>)) :  <span class="comment"># 尝试进一步合并</span></span><br><span class="line">        Hmp1 = aprioriGen(H, m + <span class="number">1</span>)  <span class="comment"># 将单个集合元素两两合并</span></span><br><span class="line">        Hmp1 = calcConf(freqSet, Hmp1, supportData, brl, minConf)</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">len</span>(Hmp1) &gt; <span class="number">1</span>) :  <span class="comment"># need at least two sets to merge</span></span><br><span class="line">            rulesFromConseq(freqSet, Hmp1, supportData, brl, minConf)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generateRules</span>(<span class="params">L, supportData, minConf=<span class="number">0.7</span></span>) :</span>  <span class="comment"># supportData 是一个字典</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    功能：获取关联规则的封装函数</span></span><br><span class="line"><span class="string">    :param L:频繁项列表</span></span><br><span class="line"><span class="string">    :param supportData:每个频繁项对应的支持度</span></span><br><span class="line"><span class="string">    :param minConf:最小置信度</span></span><br><span class="line"><span class="string">    :return:强关联规则</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    bigRuleList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(L)) :  <span class="comment"># 从为2个元素的集合开始</span></span><br><span class="line">        <span class="keyword">for</span> freqSet <span class="keyword">in</span> L[i] :</span><br><span class="line">            <span class="comment"># 只包含单个元素的集合列表</span></span><br><span class="line">            H1 = [<span class="built_in">frozenset</span>([item]) <span class="keyword">for</span> item <span class="keyword">in</span> freqSet]  <span class="comment"># frozenset({2, 3}) 转换为 [frozenset({2}), frozenset({3})]</span></span><br><span class="line">            <span class="comment"># 如果集合元素大于2个，则需要处理才能获得规则</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">1</span>) :</span><br><span class="line">                rulesFromConseq(freqSet, H1, supportData, bigRuleList, minConf)  <span class="comment"># 集合元素 集合拆分后的列表 。。。</span></span><br><span class="line">            <span class="keyword">else</span> :</span><br><span class="line">                calcConf(freqSet, H1, supportData, bigRuleList, minConf)</span><br><span class="line">    <span class="keyword">return</span> bigRuleList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="comment"># 初始化数据</span></span><br><span class="line">    dataSet = loadDataSet()</span><br><span class="line">    <span class="comment"># 计算出频繁项集合对应的支持度</span></span><br><span class="line">    L, suppData = apriori(dataSet,minSupport=<span class="number">0.5</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"频繁项集："</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> L:</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> i:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">list</span>(j))</span><br><span class="line">    <span class="comment"># 得出强关联规则</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"关联规则："</span>)</span><br><span class="line">    rules = generateRules(L, suppData, minConf=<span class="number">0.7</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行效果：</p>
<p><img src="/.io//2.png" alt="结果展示"></p>
<p><a href="https://blog.csdn.net/weixin_44106306/article/details/105978944">代码参考</a></p>
]]></content>
      <categories>
        <category>数据挖掘</category>
        <category>关联规则</category>
      </categories>
      <tags>
        <tag>数据挖掘</tag>
        <tag>Aprior</tag>
      </tags>
  </entry>
  <entry>
    <title>data-mining-推荐算法</title>
    <url>/posts/4225/</url>
    <content><![CDATA[<h1 id="TF-IDF"><a href="#TF-IDF" class="headerlink" title="TF-IDF"></a>TF-IDF</h1><h3 id="tf"><a href="#tf" class="headerlink" title="tf"></a>tf</h3><p>首先思考一个问题，搜索一个关键词的时候，我们一般很快想到这个词在这个文本中出现的次数，如果次数多的话那么我们可以认为这个文本对于这个关键字来说是匹配的</p>
<p>故提出了TF概念，其实本质上来说就是单词在文本中出现的频率</p>
<span id="more"></span>
<script type="math/tex; mode=display">
tf(t,d) = \frac{n_{t,d}}{\sum_{k}n_{k,d}}</script><h3 id="idf"><a href="#idf" class="headerlink" title="idf"></a>idf</h3><p>再思考这么一个问题，仅仅考虑频率合理吗？例如一个文本中含有大量“我，的”这种词，而你的搜索词中正好也有这两个词的话，那么现在我们通常情况下都不会考虑这个频繁词，那么我们如何来实现这一件事情呢？于是人们提出了IDF的概念，用来抵消这一现象</p>
<script type="math/tex; mode=display">
idf(t,D) = log\frac{|D|}{| \{ d \in D:t\in d \}|}</script><p>其中分子<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex" xmlns="http://www.w3.org/2000/svg" width="3.131ex" height="2.26ex" role="img" focusable="false" viewbox="0 -749.5 1384 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D437" d="M287 628Q287 635 230 637Q207 637 200 638T193 647Q193 655 197 667T204 682Q206 683 403 683Q570 682 590 682T630 676Q702 659 752 597T803 431Q803 275 696 151T444 3L430 1L236 0H125H72Q48 0 41 2T33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM703 469Q703 507 692 537T666 584T629 613T590 629T555 636Q553 636 541 636T512 636T479 637H436Q392 637 386 627Q384 623 313 339T242 52Q242 48 253 48T330 47Q335 47 349 47T373 46Q499 46 581 128Q617 164 640 212T683 339T703 469Z"/></g><g data-mml-node="mo" transform="translate(1106,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"/></g></g></g></svg></mjx-container>指的是文档的个数，分母指的是包含关键字的文档的个数。举个例子来说，有两个文本，其中两个文本都有”的”，那么分子就是2，分母也是2，结果是1再取对数就是0。</p>
<h3 id="tf-idf"><a href="#tf-idf" class="headerlink" title="tf-idf"></a>tf-idf</h3><p>接下来就很简单了，该描述我们的TF-IDF了，所谓TF-IDF就是将TF和IDF进行一个相乘的运算，即</p>
<script type="math/tex; mode=display">
tf-idf = tf × idf</script><p>很明显从这个公式中我们可以知道，IDF它什么样的情况下会大呢，它希望这个关键词在我的文本出现的多并且在别的文档中出现的次数少，这样才会显得我的文本比别人的显得有特点。</p>
<h3 id="multiple-query-word"><a href="#multiple-query-word" class="headerlink" title="multiple query word"></a>multiple query word</h3><p>那么当出现了有多个查询呢，例如computer network，那么就对两个单词做拆分，分别计算每个单词的tf-idf，然后最后进行一个累加操作，非常简单</p>
<script type="math/tex; mode=display">
score = \sum_{t\in q}tf-idf(t,d,D)</script><h3 id="需要思考的问题"><a href="#需要思考的问题" class="headerlink" title="需要思考的问题"></a>需要思考的问题</h3><p>​    现在可以计算tf-idf了，接下来我们需要干什么呢？答案是将文本输入到计算机中去！但是计算机是理解不了我们的文本的呀，所以说有一个聪明的人他简单粗暴的将文本中含有多少个词，就对应与一个向量vector，例如这个文本中有10000个单词的话，那就直接将这个单词映射为10000维的向量，对其中的每一个单词上进行编码的话就是让对应的向量某一位为1，其它位为0，这样就可以表示这1万个向量，但是这种表示方法（词袋模型）很快就会出现许多问题，例如：</p>
<ul>
<li>如果单词数量非常多的话，那么这个维数就会非常高，在计算过程当中，就会平增许多复杂的计算</li>
<li>这种方法没有考虑单词与单词之间的关系，其实单词与单词之间是有关系，ont-hot编码方式直接认为各个单词之间是不相关的</li>
</ul>
<p>还有一种表示方法，就是将一篇文档映射成一个向量，我认为这个是借鉴了one-hot的思想，它将一篇文档假设有1000个关键词，如果当这个关键词存在的话，则在对应的位置上改变数字，这个数字可以是1，也可以是出现的次数，也可以是对应关键字的tf-idf值，这些都是可行的，可表示为 $p=(w<em>{1,p},w</em>{2,p},…,w_{t,p})$</p>
<p>当可以将文档表示为vector的话，那么就可以计算两篇文章的相似度了，在这里我们使用余弦相似度来计算，余弦相似度和欧式距离在本质上是没有区别的，因为在计算方式（公式上）上可以等同为两个比较是等价的：</p>
<script type="math/tex; mode=display">
sim(p,q) = cos(\theta)=\frac{p\cdot q}{|p|\cdot|q|}</script><p>​    这样可以对文档进行聚类，但是实际来说是非常困难的，为什么呢？因为会出现许多的同义词，例如poor recall和poor precision这两个问题，poor recall指的是例如对应于我想搜索一个car但是有很多vehicle的文章并没有给我显示出来，poor precision例如搜索一个apple，对应水果和apple公司，你如何去做抉择，给你的搜索用户返回对应的页面呢？是各自50篇？都具有各自的问题，对于这一种现象的处理，后面有学者研究出了矩阵分解的相关方法来处理。</p>
<h2 id="Latent-Semantic-Analysis-隐含语义分析"><a href="#Latent-Semantic-Analysis-隐含语义分析" class="headerlink" title="Latent Semantic Analysis  隐含语义分析"></a>Latent Semantic Analysis  隐含语义分析</h2><p>首先直接给出公式</p>
<script type="math/tex; mode=display">
X = TSD^T</script><p>其中的X就是term-document矩阵，然后对X进行分解，咋一看非常像奇异值分解，关于奇异值分解我后续也会出一篇文章讲解一下（先画饼），其中T是一个正交阵，D也是一个正交阵，S是一个对角阵（类似于特征值矩阵），X：m×n ；T：m×r；S：r×r；D：n×r；其中r=rank(X)</p>
<p>那么现在我们来计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="5.285ex" height="1.904ex" role="img" focusable="false" viewbox="0 -841.7 2336 841.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="msup" transform="translate(852,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="mi" transform="translate(936.2,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g></g></svg></mjx-container>将会等于一个什么值，其中会有很巧妙的tips</p>
<script type="math/tex; mode=display">
XX^T = (TSD^T)(TSD^T)^T = (TSD^TDS^TT^T)=T(SS^T)T^T
    = (TS)(TS)^T</script><p>很奇怪我们为什么想要计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="5.285ex" height="1.904ex" role="img" focusable="false" viewbox="0 -841.7 2336 841.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="msup" transform="translate(852,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="mi" transform="translate(936.2,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g></g></svg></mjx-container>这一个东东呢？其实我们可以通过矩阵计算来解释一下，对于<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="5.285ex" height="1.904ex" role="img" focusable="false" viewbox="0 -841.7 2336 841.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="msup" transform="translate(852,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="mi" transform="translate(936.2,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g></g></svg></mjx-container>矩阵的第ij元素来说就是，第i个关键字与第j个关键字做了一个內积的和，这种的话我们从上面这个变换过程中可以看出，我们可以使用TS这一个矩阵替代掉原来的X矩阵，相当是使用了一个新的向量空间中的向量来替代对应的X矩阵，这个是对于term来说的，那如果我想对document也做一个类似这样的变化怎么搞？其实细心的人就会发现，只要将<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="5.285ex" height="1.904ex" role="img" focusable="false" viewbox="0 -841.7 2336 841.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="msup" transform="translate(852,0)"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="mi" transform="translate(936.2,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g></g></g></svg></mjx-container>反过来即可也就是计算<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: 0" xmlns="http://www.w3.org/2000/svg" width="5.285ex" height="1.904ex" role="img" focusable="false" viewbox="0 -841.7 2336 841.7"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g><g data-mml-node="mi" transform="translate(936.2,363) scale(0.707)"><path data-c="1D447" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"/></g></g><g data-mml-node="mi" transform="translate(1484,0)"><path data-c="1D44B" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"/></g></g></g></svg></mjx-container>就能实现，现在还有一个问题，TS这个矩阵的维度和原来应该是一样的吗？</p>
]]></content>
      <categories>
        <category>数据挖掘</category>
        <category>推荐算法</category>
      </categories>
      <tags>
        <tag>推荐算法</tag>
      </tags>
  </entry>
  <entry>
    <title>n-皇后问题</title>
    <url>/posts/23653/</url>
    <content><![CDATA[<p>n−皇后问题是指将 n 个皇后放在 n×n 的国际象棋棋盘上，使得皇后不能相互攻击到，即任意两个皇后都不能处于同一行、同一列或同一斜线上。</p>
<p><img src="/.io//n-queue.png" alt="n-queens.png"></p>
<p>现在给定整数 n，请你输出所有的满足条件的棋子摆法。</p>
<span id="more"></span>
<h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含整数 n。</p>
<h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每个解决方案占 n 行，每行输出一个长度为 n 的字符串，用来表示完整的棋盘状态。</p>
<p>其中 <code>.</code> 表示某一个位置的方格状态为空，<code>Q</code> 表示某一个位置的方格上摆着皇后。</p>
<p>每个方案输出完成后，输出一个空行。</p>
<p><strong>注意：行末不能有多余空格。</strong></p>
<p>输出方案的顺序任意，只要不重复且没有遗漏即可。</p>
<h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤9</p>
<h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>
<h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.Q..</span><br><span class="line">...Q</span><br><span class="line">Q...</span><br><span class="line">..Q.</span><br><span class="line"></span><br><span class="line">..Q.</span><br><span class="line">Q...</span><br><span class="line">...Q</span><br><span class="line">.Q..</span><br></pre></td></tr></table></figure>
<h4 id="算法流程描述"><a href="#算法流程描述" class="headerlink" title="算法流程描述"></a>算法流程描述</h4><p>使用dfs暴力搜索</p>
<p><img src="/.io//算法过程.png" alt="算法过程"></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10</span>*<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="comment">//dg代表对角线 udg代表反对角线 col代表列</span></span><br><span class="line"><span class="keyword">int</span> col[N],dg[N],udg[N];</span><br><span class="line"><span class="keyword">char</span> g[N][N];  <span class="comment">//用来保存原来的棋盘</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span>  <span class="comment">//u表示的是当前遍历的第u行元素</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( u==n )  <span class="comment">//说明遍历完成，输出存储的结果即可</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">            <span class="comment">//%s 输出的是一维数据</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,g[i]); </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当u&lt;n的时候</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//分别对应于不同的对角线 u相当于x i相当于y 用截距</span></span><br><span class="line">        <span class="keyword">if</span>(col[i] == <span class="number">0</span> &amp;&amp; dg[i+u] == <span class="number">0</span> &amp;&amp; udg[n+i-u] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            g[u][i] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            col[i] = dg[i+u] = udg[n-u+i] = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">dfs</span>(u + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//恢复现场</span></span><br><span class="line">            col[i] = dg[u+i] = udg[n-u+i] = <span class="number">0</span>;</span><br><span class="line">            g[u][i] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)</span><br><span class="line">            g[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>);  <span class="comment">//从第0行开始</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="解法二-按位搜索"><a href="#解法二-按位搜索" class="headerlink" title="解法二 按位搜索"></a>解法二 按位搜索</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">bool</span> row[N],col[N],dg[N],udg[N];</span><br><span class="line"><span class="keyword">char</span> g[N][N];</span><br><span class="line"></span><br><span class="line"><span class="comment">//q指代现在已经有多少个皇后</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(q &gt; n) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(y == n)</span><br><span class="line">    &#123;</span><br><span class="line">        x++;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>( x == n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(q == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s &quot;</span>,g[i]);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    g[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(!row[x] &amp;&amp; !col[y] &amp;&amp; !dg[y - x + n] &amp;&amp; !udg[y + x])</span><br><span class="line">    &#123;</span><br><span class="line">        row[x] = col[y] = dg[y - x + n] = udg[y + x] = <span class="literal">true</span>;</span><br><span class="line">        g[x][y] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x, y+<span class="number">1</span>, q+<span class="number">1</span>);</span><br><span class="line">        row[x] = col[y] = dg[y - x + n] = udg[y + x] = <span class="literal">false</span>;</span><br><span class="line">        g[x][y] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(x, y+<span class="number">1</span>， q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Acwing</category>
        <category>DFS</category>
      </categories>
      <tags>
        <tag>dfs</tag>
      </tags>
  </entry>
  <entry>
    <title>python中的图的存储</title>
    <url>/posts/39894/</url>
    <content><![CDATA[<h3 id="python中图的存储形式以及度的计算"><a href="#python中图的存储形式以及度的计算" class="headerlink" title="python中图的存储形式以及度的计算"></a>python中图的存储形式以及度的计算</h3><h4 id="邻接表的方式-（adjacency-list）"><a href="#邻接表的方式-（adjacency-list）" class="headerlink" title="邻接表的方式 （adjacency list）"></a>邻接表的方式 （adjacency list）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">filename = <span class="string">"sns_datasets/karate/karate_edges.txt"</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">34</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用邻接表的方式</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjacency_list</span>(<span class="params">filename</span>):</span></span><br><span class="line">    mydict = {}</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            temp_list = line.split()</span><br><span class="line">            start = temp_list[<span class="number">0</span>];</span><br><span class="line">            end = temp_list[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 存储start -&gt; end</span></span><br><span class="line">            <span class="keyword">if</span>(start <span class="keyword">not</span> <span class="keyword">in</span> mydict):</span><br><span class="line">                mydict[start] = []</span><br><span class="line">            start_list = mydict[start]</span><br><span class="line">            start_list.append(end)</span><br><span class="line">            mydict[start] = start_list</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 存储end结点 end -&gt; start</span></span><br><span class="line">            <span class="keyword">if</span>(end <span class="keyword">not</span> <span class="keyword">in</span> mydict):</span><br><span class="line">                mydict[end] = []</span><br><span class="line">            end_list = mydict[end]</span><br><span class="line">            end_list.append(start)</span><br><span class="line">            mydict[end] = end_list</span><br><span class="line">    <span class="built_in">print</span>(mydict)</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment">#adjacency_list(filename)</span></span><br><span class="line">    <span class="comment">#adjacency_matric(filename)</span></span><br><span class="line">    get_degree(filename)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h4 id="输出结果"><a href="#输出结果" class="headerlink" title="输出结果"></a>输出结果</h4><p><img src="/Users/chenweiduo1512/Library/Application Support/typora-user-images/image-20211106111559797.png" alt="image-20211106111559797"></p>
<h4 id="邻接矩阵的形式-（adjacency-matrix）"><a href="#邻接矩阵的形式-（adjacency-matrix）" class="headerlink" title="邻接矩阵的形式 （adjacency matrix）"></a>邻接矩阵的形式 （adjacency matrix）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">filename = <span class="string">"sns_datasets/karate/karate_edges.txt"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对于无向图来说</span></span><br><span class="line">n = <span class="number">34</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">adjacency_matric</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="comment"># 使用邻接矩阵的形式必须要先初始化矩阵的大小</span></span><br><span class="line">    <span class="comment"># 如果在不知道矩阵的大小的时候，可以先算出来，就是里面结点的个数</span></span><br><span class="line">    adjacency_Matric = np.zeros((n,n))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            temp_list = line.split()</span><br><span class="line">            <span class="comment"># 对于一个无向图来说</span></span><br><span class="line">            adjacency_Matric[<span class="built_in">int</span>(temp_list[<span class="number">0</span>])-<span class="number">1</span>][<span class="built_in">int</span>(temp_list[<span class="number">1</span>])-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">            adjacency_Matric[<span class="built_in">int</span>(temp_list[<span class="number">1</span>])-<span class="number">1</span>][<span class="built_in">int</span>(temp_list[<span class="number">0</span>])-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(adjacency_Matric)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="输出结果-1"><a href="#输出结果-1" class="headerlink" title="输出结果"></a>输出结果</h4><p><img src="/Users/chenweiduo1512/Library/Application Support/typora-user-images/image-20211106112454590.png" alt="image-20211106112454590"></p>
<h4 id="计算结点的度-compute-degree"><a href="#计算结点的度-compute-degree" class="headerlink" title="计算结点的度 compute degree"></a>计算结点的度 compute degree</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算结点的度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_degree</span>(<span class="params">filename</span>):</span></span><br><span class="line">    mydict = {}</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">            temp_list = line.split()</span><br><span class="line">            start = temp_list[<span class="number">0</span>]</span><br><span class="line">            end = temp_list[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> start <span class="keyword">not</span> <span class="keyword">in</span> mydict:</span><br><span class="line">                mydict[start] = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> end <span class="keyword">not</span> <span class="keyword">in</span> mydict:</span><br><span class="line">                mydict[end] = <span class="number">0</span></span><br><span class="line">            mydict[start] += <span class="number">1</span></span><br><span class="line">            mydict[end] += <span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(mydict)</span><br></pre></td></tr></table></figure>
<h4 id="输出结果-2"><a href="#输出结果-2" class="headerlink" title="输出结果"></a>输出结果</h4><p><img src="/Users/chenweiduo1512/Library/Application Support/typora-user-images/image-20211106112854921.png" alt="image-20211106112854921"></p>
]]></content>
      <categories>
        <category>-社交网络</category>
      </categories>
  </entry>
  <entry>
    <title>测试</title>
    <url>/posts/37773/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="1366adcf98866e465e20f6d6c9f2cdf5e58f2c080b211b4f6ebfde5528b4ebf6"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Acwing</category>
        <category>二叉树</category>
      </categories>
      <tags>
        <tag>Acwing</tag>
      </tags>
  </entry>
  <entry>
    <title>UcoreLab0</title>
    <url>/posts/34866/</url>
    <content><![CDATA[<h1 id="Ucore"><a href="#Ucore" class="headerlink" title="Ucore"></a>Ucore</h1><h2 id="Lab0-实验准备"><a href="#Lab0-实验准备" class="headerlink" title="Lab0 实验准备"></a>Lab0 实验准备</h2><h3 id="实验环境设置"><a href="#实验环境设置" class="headerlink" title="实验环境设置"></a>实验环境设置</h3><h4 id="Linux常用指令"><a href="#Linux常用指令" class="headerlink" title="Linux常用指令"></a>Linux常用指令</h4><ol>
<li>在屏幕上输出字符：echo</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo "hello world"</span><br></pre></td></tr></table></figure>
<ol>
<li>显示文件内容：cat、less、more</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &lt;filename&gt;</span><br></pre></td></tr></table></figure>
<p><code>注：在本文中所有带&lt;&gt;符号的参数都无需加""，直接加对应的符号</code></p>
<span id="more"></span>
<p>less 和 more显示比较大的文本文件内容</p>
<ol>
<li>复制文件：cp</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp &lt;filename.txt&gt; &lt;filename_copy.txt&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>移动文件：mv</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv &lt;filename.txt&gt; &lt;filename_new.txt&gt;</span><br></pre></td></tr></table></figure>
<ol>
<li>建立一个空文本文件：touch</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch demo.txt</span><br></pre></td></tr></table></figure>
<ol>
<li>删除文件：rm</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf # -r是递归删除 -f是强制删除</span><br><span class="line">rm -i &lt;filename.txt&gt; # 系统在执行删除操作之前输出一条确认提示</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 特别注意 如果每次都忘记输入i的话 可以让rm的 -i变成默认参数</span></span><br><span class="line">alias rm = 'rm -i'</span><br></pre></td></tr></table></figure>
<ol>
<li>查询文件列表：ls</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -p # 显示某一项的类型 ，可以使文件、文件夹、快捷链接等</span><br><span class="line">ls -a # 列出包括隐藏文件在内的所有文件</span><br></pre></td></tr></table></figure>
<ol>
<li>查询当前进程：ps</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将会列出系统当前运行的所有进程</span></span><br><span class="line">ps -a # 列出系统当前运行的所有进程，包括其他用户启动的</span><br><span class="line"></span><br><span class="line">[ucore]:~$ ps</span><br><span class="line">PID TTY          TIME CMD</span><br><span class="line">21071 pts/1    00:00:00 bash</span><br><span class="line">22378 pts/1    00:00:00 ps</span><br></pre></td></tr></table></figure>
<h4 id="Linux下的一些特性"><a href="#Linux下的一些特性" class="headerlink" title="Linux下的一些特性"></a>Linux下的一些特性</h4><ol>
<li>重定向</li>
</ol>
<p>实现将命令产生的输出流指向一个文件而不是默认的终端</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls  &gt;  &lt;filename.txt&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">ls命令产生的输出 将会写入filename中，如果该文件不存在的话，将创建该文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果filename文件存在的话，那么将会覆盖原来的文件内容 那如果文件已经存在，但是我们想要将文件写到已有文件内容的最后该怎么办？ 使用  &gt;&gt;</span> </span><br><span class="line">command &gt;&gt; filename </span><br><span class="line">ls &gt;&gt;  &lt;filename.txt&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">另一种重定向方式</span></span><br><span class="line">command &lt; filename</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 讲一个文件的内容作为将要执行的命令的输入</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 已有文件 file.txt 内容为 1.txt 2.txt 6.txt 5.txt &lt;Ctrl-D&gt;</span></span><br><span class="line">sort &lt; file.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示效果</span></span><br><span class="line">1.txt 2.txt 5.txt 6.txt </span><br></pre></td></tr></table></figure>
<ol>
<li>管道</li>
</ol>
<p>Linux 的 nb之处在于将几个简单的命令组合成复杂的功能，它是如何实现的呢？答案是管道，管道符号为 | </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">grep -i command &lt; myfile | sort &gt; result.text</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令含义</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 搜索myfile中的命令，并将输出分类并写入到分类文件到result.text中</span></span><br><span class="line"></span><br><span class="line">ls -l | less</span><br></pre></td></tr></table></figure>
<ol>
<li>后台进程</li>
</ol>
<p>CLI不是系统的串行接口，可以在执行其他命令时给出系统命令</p>
<p>要启动一个进程到后台，追加一个“&amp;”到命令后面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sleep 60 &amp;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 睡眠命令在后台运行 您依然可以与计算机交互</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 除了不同步启动命令以外 最好将<span class="string">'&amp;'</span> 理解成 <span class="string">';'</span></span></span><br></pre></td></tr></table></figure>
<p>如果现在你有一个命令会占用你非常多时间，我想让这个命令在后台运行<br>只需要在命令运行时按下ctrl+z，他就会停止，然后输入bg使其转入后台，输入fg命令可以使其转回前台</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sleep 60</span><br><span class="line">&lt;ctrl-z&gt; # ctrl+z 键</span><br><span class="line">bg</span><br><span class="line">fg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> &lt;ctrl-c&gt; 为<span class="built_in">kill</span>一个前台进程</span></span><br></pre></td></tr></table></figure>
<h4 id="需要了解和使用的一些软件"><a href="#需要了解和使用的一些软件" class="headerlink" title="需要了解和使用的一些软件"></a>需要了解和使用的一些软件</h4><ol>
<li>编辑器</li>
</ol>
<ul>
<li><p>gedit </p>
<p>gedit是gnmoe桌面环境下兼容UTF-8的文本编辑器</p>
<p>优点：语法高亮，中文支持很好，简单易用</p>
</li>
<li><p>vim</p>
<p>vim天下第一好吧，unix下的vi的改进版本，功能极为强大，unbutu建议升级到vim最新版本</p>
<p>[1] 了解vim的常用命令即使用，暂时空缺，下次再补</p>
<p>[2] 配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set nocompatible</span><br><span class="line">set encoding=utf-8</span><br><span class="line">set fileencodings=utf-8,chinese</span><br><span class="line">set tabstop=4</span><br><span class="line">set cindent shiftwidth=4</span><br><span class="line">set backspace=indent,eol,start</span><br><span class="line">autocmd Filetype c set omnifunc=ccomplete#Complete</span><br><span class="line">autocmd Filetype cpp set omnifunc=cppcomplete#Complete</span><br><span class="line">set incsearch</span><br><span class="line">set number</span><br><span class="line">set display=lastline</span><br><span class="line">set ignorecase</span><br><span class="line">syntax on</span><br><span class="line">set nobackup</span><br><span class="line">set ruler</span><br><span class="line">set showcmd</span><br><span class="line">set smartindent</span><br><span class="line">set hlsearch</span><br><span class="line">set cmdheight=1</span><br><span class="line">set laststatus=2</span><br><span class="line">set shortmess=atI</span><br><span class="line">set formatoptions=tcrqn</span><br><span class="line">set autoindent  </span><br></pre></td></tr></table></figure>
<p>将删除配置文件保存到：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/.vimrc</span><br></pre></td></tr></table></figure>
<p>注：.vimrc默认情况不可见，ls -a，如果~目录下不存在，可以手动创建</p>
</li>
</ul>
<ol>
<li><p>源码阅读工具</p>
<p>understand</p>
<p>商业软件、跨平台</p>
</li>
<li><p>源码比较工具</p>
</li>
</ol>
<ul>
<li><p>diff、meld</p>
<p>diff：用于比较不同目录或不同文件的区别</p>
<p>diff是命令行工具，使用非常简单</p>
<p><code>meld是一个图形GUI程序，非常好用，可以直接比较两个文件夹之间的差异，非常直观</code></p>
</li>
<li><p>patch</p>
<p>patch是打补丁工具 他也是一个命令行工具</p>
</li>
</ul>
<ol>
<li><p>硬件模拟器 </p>
<p>qemu</p>
<p>只需要了解到最简单的<code>make qemu</code>即可</p>
</li>
</ol>
<h3 id="编程开发调试中的基本工具-gcc、gdb、make、makefile"><a href="#编程开发调试中的基本工具-gcc、gdb、make、makefile" class="headerlink" title="编程开发调试中的基本工具 gcc、gdb、make、makefile"></a>编程开发调试中的基本工具 gcc、gdb、make、makefile</h3><ol>
<li><p>gcc的基本用法</p>
<p>安装gcc编译环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>
<p>编译简单的c程序</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> hello.c 文件内容</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;stdio.h&gt;</span></span><br><span class="line">int main()</span><br><span class="line">{</span><br><span class="line">	printf("hello,world\n");</span><br><span class="line">	return 0;</span><br><span class="line">}</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">在命令行下</span></span><br><span class="line">gcc -Wall hello.c -o hello</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数解释</span></span><br><span class="line">将hello.c中的代码编译成机器码并存储在可执行文件hello中</span><br><span class="line">机器码的文件名 是通过-o来指定的 这个参数通常作为最后一个参数</span><br><span class="line">如果被省略，那么默认输出为a.out</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -Wall 参数 为开启编译器几乎所有的常用的警告</span></span><br><span class="line"></span><br><span class="line">./hello # 执行文件 ./指代当前目录</span><br></pre></td></tr></table></figure>
</li>
<li><p>AT&amp;T汇编基本语法</p>
<p>AT&amp;T格式的汇编与Intel格式的汇编有一点差异，主要在以下几个方面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 寄存器命名原则</span></span><br><span class="line">        AT&amp;T: %eax                      Intel: eax</span><br><span class="line"><span class="meta">#</span><span class="bash"> 源/目的操作数顺序</span> </span><br><span class="line">        AT&amp;T: movl %eax, %ebx           Intel: mov ebx, eax</span><br><span class="line"><span class="meta">#</span><span class="bash"> 常数/立即数的格式</span>　</span><br><span class="line">        AT&amp;T: movl $_value, %ebx        Intel: mov eax, _value</span><br><span class="line"><span class="meta">#</span><span class="bash"> 把value的地址放入eax寄存器</span></span><br><span class="line">        AT&amp;T: movl $0xd00d, %ebx        Intel: mov ebx, 0xd00d</span><br><span class="line"><span class="meta">#</span><span class="bash"> 操作数长度标识</span> </span><br><span class="line">        AT&amp;T: movw %ax, %bx             Intel: mov bx, ax</span><br><span class="line"><span class="meta">#</span><span class="bash"> 寻址方式</span> </span><br><span class="line">        AT&amp;T:   immed32(basepointer, indexpointer, indexscale)</span><br><span class="line">        Intel:  [basepointer + indexpointer × indexscale + imm32)</span><br></pre></td></tr></table></figure>
<p>如果操作系统处于保护模式下，使用的是32位的线性地址，在计算地址的时候不用考虑segment:offset的问题</p>
<p>上面的地址应该为：</p>
<p><code>imm322 + basepointer + indexpointer × indexscale</code></p>
<p>实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 直接寻址</span></span><br><span class="line">		AT&amp;T: foo                      Intel: [foo]</span><br><span class="line">		foo是一个全局变量，加上$表示地址引用，不加代表值引用</span><br><span class="line">		对于局部变量，可以使用堆栈指针引用</span><br><span class="line"><span class="meta">#</span><span class="bash"> 寄存器间接寻址</span></span><br><span class="line">		AT&amp;T: (%eax)                    Intel: [eax]</span><br><span class="line"><span class="meta">		</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 变址寻址</span></span><br><span class="line">		AT&amp;T: _variabl(%eax)           Intel: [eax + _variable]</span><br><span class="line">		AT&amp;T: _array( ,%eax, 4)        Intel: [eax × 4 + _array]</span><br><span class="line">		AT&amp;T: _array(%ebx, %eax,8)     Intel: [ebx + eax × 8 + _array]</span><br></pre></td></tr></table></figure>
<ol>
<li><p>GCC基本内联汇编</p>
<p>GCC提供了两种内联汇编语句</p>
<ul>
<li><p>基本内联汇编语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">asm("statement")</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">例如</span></span><br><span class="line"></span><br><span class="line">asm("nop");</span><br><span class="line">asm("cli");</span><br></pre></td></tr></table></figure>
<p>“asm”和”<em>asm</em>“的含义是完全一样的。如果有多行汇编，每一行都要加上”\n\t”</p>
<p>这样可以让gcc把内联汇编代码翻译成一般的汇编代码时能够保证换行和留有一定的空格（增加了可读性）。对于基本的asm语句，GCC编译出来的代码就是双引号里的内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">asm("pushl %eax\n\t"</span><br><span class="line">	"movl $0,%eax\n\t"</span><br><span class="line">	"popl %eax"</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>而实际gcc在处理汇编是，是要把asm(…)的内容打印到汇编文件中</p>
</li>
<li><p>扩展内联汇编语句</p>
<p>这个太难，用到的时候再看看~，先鸽着</p>
</li>
</ul>
</li>
<li><p>make和makefile</p>
<p>GUN make是一种代码维护工具，在中大型项目中，他将根据程序各个模块的更新情况，自动的维护和生成目标代码</p>
<p>make命令执行时，需要一个Makefile文件，用来告诉make命令需要怎么样的去编译和链接程序。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 场景模拟</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 现在我们的project有8个c文件，和3个头文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 现在需要你写一个makefile来告诉make如何编译和链接这几个文件</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">规则如下：</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 	1. 如果这个工程没有被编译过，那么所有的c文件都要编译和链接</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   2. 如果这个project的某几个c文件被修改，那么只编译修改过的c文件，并链接目标程序</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   3. 如果这个project的头文件改变了，那么需要编译引用了这几个头文件的c文件，并链接目标程序</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 只要makefile写的足够好的情况下，只用一个make命令就可以完成</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>makefile规则</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">target... : prerequisites...</span><br><span class="line">    command</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>target：目标文件，可以是object file，也可以是可执行文件。甚至可以是一个标签label</p>
<p>prerequisites：要生成那个target所需要的文件或者目标</p>
<p>command：make需要执行的命令（任意的shell命令）</p>
<p>由此可知，target这一个或者多个的目标文件依赖于prerequisites中的文件，其生成规则在command中，如果prerequisites中有一个以上的文件比target文件要新一点，那么command定义的命令就会被执行。这就是makefile的核心规则</p>
</li>
</ul>
</li>
<li><p>gdb的使用（非常重要）</p>
<p>在可以使用gdb调试程序前，必须使用-g或者-ggdb编译选项编译源文件。运行gdb</p>
<p><code>gdb progname</code></p>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>OS</category>
        <category>Ucore</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Ucore</tag>
      </tags>
  </entry>
</search>
